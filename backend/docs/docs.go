// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/device": {
            "put": {
                "description": "Updates Device on database.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "device"
                ],
                "summary": "Update Device on database",
                "parameters": [
                    {
                        "description": "Device",
                        "name": "device",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Device"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Device"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorLog"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorLog"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Authorization": []
                    }
                ],
                "description": "Post request to add new device with user ID on database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "device"
                ],
                "summary": "Creates device on database.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UserID",
                        "name": "userID",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Device"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorLog"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorLog"
                        }
                    }
                }
            }
        },
        "/devices": {
            "get": {
                "description": "Gets devices from database.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "device"
                ],
                "summary": "Get List of all devices",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Device"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorLog"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorLog"
                        }
                    }
                }
            }
        },
        "/devices/bySecureId/{secureId}": {
            "get": {
                "description": "Gets Device from database by matching secure ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "device"
                ],
                "summary": "Get device by its secure ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Secure ID",
                        "name": "secureId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Device"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorLog"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorLog"
                        }
                    }
                }
            }
        },
        "/googlesearch/geosearch/:lat/:lng": {
            "get": {
                "security": [
                    {
                        "Authorization": []
                    }
                ],
                "description": "GET request for closest address based on location latlon",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "googleapi"
                ],
                "summary": "Gets closest address based on location",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UserID",
                        "name": "userID",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Latitude",
                        "name": "lat",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Longitude",
                        "name": "lng",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/maps.PlacesSearchResult"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorLog"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorLog"
                        }
                    }
                }
            }
        },
        "/googlesearch/textsearch/:query": {
            "get": {
                "security": [
                    {
                        "Authorization": []
                    }
                ],
                "description": "GET request for location strings based on search query",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "googleapi"
                ],
                "summary": "Gets locations from text query",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Query",
                        "name": "query",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UserID",
                        "name": "userID",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/maps.PlacesSearchResult"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorLog"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorLog"
                        }
                    }
                }
            }
        },
        "/googlesearch/textsearch/:query/:lat/:lng": {
            "get": {
                "security": [
                    {
                        "Authorization": []
                    }
                ],
                "description": "GET request for location strings based on search query and latlon of user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "googleapi"
                ],
                "summary": "Gets prioritized locations from text query and position",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UserID",
                        "name": "userID",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Query",
                        "name": "query",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Latitude",
                        "name": "lat",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Longitude",
                        "name": "lng",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/maps.PlacesSearchResult"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorLog"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorLog"
                        }
                    }
                }
            }
        },
        "/locations/GetLatestLocationsPeriods/{secureId}": {
            "get": {
                "description": "Get latest location periods from database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "location"
                ],
                "summary": "Get latest location periods",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Secure ID",
                        "name": "secureId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dtos.DeltaDTO"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorLog"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorLog"
                        }
                    }
                }
            }
        },
        "/locations/getLatest/{secureId}": {
            "get": {
                "description": "Get latest location from database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "location"
                ],
                "summary": "Get latest location",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Secure ID",
                        "name": "secureId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Location"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorLog"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorLog"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Checks usercredentials and logs in, returns token for authorized User",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login for users",
                "parameters": [
                    {
                        "description": "Payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.LoginPayload"
                        }
                    },
                    {
                        "description": "User",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dtos.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "invalid json",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "invalid user credentials",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorLog"
                        }
                    },
                    "500": {
                        "description": "error signing token",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/logs": {
            "post": {
                "description": "Posts log of tracker to database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "logging"
                ],
                "summary": "Posts log of tracker",
                "parameters": [
                    {
                        "description": "Log",
                        "name": "logs",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Log"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Log"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorLog"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorLog"
                        }
                    }
                }
            }
        },
        "/logs/getLatest/{secureId}": {
            "get": {
                "description": "Gets latest logs of secureId from database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "logging"
                ],
                "summary": "Gets latest logs of secureId",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Secure ID",
                        "name": "secureId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Log"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorLog"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorLog"
                        }
                    }
                }
            }
        },
        "/logs/syncLogs": {
            "post": {
                "description": "Syncs logs",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "logging"
                ],
                "summary": "Syncs logs",
                "parameters": [
                    {
                        "description": "Log",
                        "name": "logs",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Log"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Device"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorLog"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorLog"
                        }
                    }
                }
            }
        },
        "/reasons": {
            "get": {
                "description": "Gets reasons from database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reasons"
                ],
                "summary": "Gets reasons",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Reason"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorLog"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorLog"
                        }
                    }
                }
            }
        },
        "/tracked/deleteTrackedLocation": {
            "post": {
                "security": [
                    {
                        "Authorization": []
                    }
                ],
                "description": "POST request to delete tracked location in database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trackedlocation"
                ],
                "summary": "Delete Tracked Location",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UserID",
                        "name": "userID",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dtos.TrackedLocationDTO"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorLog"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorLog"
                        }
                    }
                }
            }
        },
        "/tracked/deleteTrackedMovement": {
            "post": {
                "security": [
                    {
                        "Authorization": []
                    }
                ],
                "description": "POST request to delete tracked movement from database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trackedmovement"
                ],
                "summary": "Delete Tracked Movement",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UserID",
                        "name": "userID",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dtos.TrackedMovementDTO"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorLog"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorLog"
                        }
                    }
                }
            }
        },
        "/tracked/insertTrackedDay": {
            "post": {
                "security": [
                    {
                        "Authorization": []
                    }
                ],
                "description": "POST request to insert tracked day into database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trackedday"
                ],
                "summary": "Insert Tracked Day",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UserID",
                        "name": "userID",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dtos.TrackedDayDTO"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorLog"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorLog"
                        }
                    }
                }
            }
        },
        "/tracked/insertTrackedLocation": {
            "post": {
                "security": [
                    {
                        "Authorization": []
                    }
                ],
                "description": "POST request to insert tracked location in database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trackedlocation"
                ],
                "summary": "Insert Tracked Location",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UserID",
                        "name": "userID",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dtos.TrackedLocationDTO"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorLog"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorLog"
                        }
                    }
                }
            }
        },
        "/tracked/insertTrackedMovement": {
            "post": {
                "security": [
                    {
                        "Authorization": []
                    }
                ],
                "description": "POST request to insert tracked movement in database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trackedmovement"
                ],
                "summary": "Insert Tracked Movement",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UserID",
                        "name": "userID",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dtos.TrackedMovementDTO"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorLog"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorLog"
                        }
                    }
                }
            }
        },
        "/tracked/insertTrackedMovementLatLon": {
            "post": {
                "security": [
                    {
                        "Authorization": []
                    }
                ],
                "description": "POST request to insert tracked latlon in database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trackedmovement"
                ],
                "summary": "Insert Tracked LatLon",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UserID",
                        "name": "userID",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dtos.TrackedMovementLatLonDTO"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorLog"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorLog"
                        }
                    }
                }
            }
        },
        "/tracked/updateTrackedDay": {
            "post": {
                "security": [
                    {
                        "Authorization": []
                    }
                ],
                "description": "POST request to update tracked day in database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trackedday"
                ],
                "summary": "Update Tracked Day",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UserID",
                        "name": "userID",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dtos.TrackedDayDTO"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorLog"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorLog"
                        }
                    }
                }
            }
        },
        "/tracked/updateTrackedLocation": {
            "post": {
                "security": [
                    {
                        "Authorization": []
                    }
                ],
                "description": "POST request to update tracked location in database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trackedlocation"
                ],
                "summary": "Update Tracked Location",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UserID",
                        "name": "userID",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dtos.TrackedLocationDTO"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorLog"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorLog"
                        }
                    }
                }
            }
        },
        "/tracked/updateTrackedMovement": {
            "post": {
                "security": [
                    {
                        "Authorization": []
                    }
                ],
                "description": "POST request to update tracked movement in database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trackedmovement"
                ],
                "summary": "Update Tracked Movement",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UserID",
                        "name": "userID",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dtos.TrackedMovementDTO"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorLog"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorLog"
                        }
                    }
                }
            }
        },
        "/tracked/updateTrackedMovementLatLon": {
            "post": {
                "security": [
                    {
                        "Authorization": []
                    }
                ],
                "description": "POST request to update tracked latlon in database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trackedmovement"
                ],
                "summary": "Update Tracked LatLon",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UserID",
                        "name": "userID",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dtos.TrackedMovementLatLonDTO"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorLog"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorLog"
                        }
                    }
                }
            }
        },
        "/trackers": {
            "post": {
                "description": "Sync Trackers",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tracker"
                ],
                "summary": "Sync Trackers",
                "parameters": [
                    {
                        "description": "Tracker",
                        "name": "tracker",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Tracker"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Tracker"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorLog"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorLog"
                        }
                    }
                }
            }
        },
        "/trackers/GetLatestTrackersPeriods/{secureId}": {
            "get": {
                "description": "Get latest tracker periods from database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tracker"
                ],
                "summary": "Get latest tracker periods",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Secure ID",
                        "name": "secureId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dtos.DeltaDTO"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorLog"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorLog"
                        }
                    }
                }
            }
        },
        "/trackers/getLatest/{secureId}": {
            "get": {
                "description": "Get latest trackers from database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tracker"
                ],
                "summary": "Get latest trackers",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Secure ID",
                        "name": "secureId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Tracker"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorLog"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorLog"
                        }
                    }
                }
            }
        },
        "/transports": {
            "get": {
                "description": "Get transports from database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transport"
                ],
                "summary": "Gets transports",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Transport"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorLog"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorLog"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dtos.DeltaDTO": {
            "type": "object",
            "properties": {
                "date": {
                    "type": "integer"
                },
                "delta": {
                    "type": "integer"
                }
            }
        },
        "dtos.LatLonDTO": {
            "type": "object"
        },
        "dtos.LoginPayload": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "dtos.LoginResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "dtos.TrackedDayDTO": {
            "type": "object",
            "properties": {
                "choiceId": {
                    "type": "integer"
                },
                "confirmed": {
                    "type": "boolean"
                },
                "day": {
                    "type": "integer"
                },
                "missing": {
                    "type": "number"
                },
                "trackedDayId": {
                    "type": "integer"
                },
                "unvalidated": {
                    "type": "number"
                },
                "validated": {
                    "type": "number"
                }
            }
        },
        "dtos.TrackedLocationDTO": {
            "type": "object",
            "properties": {
                "confirmed": {
                    "type": "boolean"
                },
                "endTime": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "lat": {
                    "type": "number"
                },
                "lon": {
                    "type": "number"
                },
                "movements": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dtos.TrackedMovementDTO"
                    }
                },
                "name": {
                    "type": "string"
                },
                "reasonId": {
                    "type": "integer"
                },
                "startTime": {
                    "type": "integer"
                },
                "trackedDayId": {
                    "type": "integer"
                }
            }
        },
        "dtos.TrackedMovementDTO": {
            "type": "object",
            "properties": {
                "confirmed": {
                    "type": "boolean"
                },
                "endTime": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "latlons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dtos.LatLonDTO"
                    }
                },
                "movementCategoryId": {
                    "type": "integer"
                },
                "startTime": {
                    "type": "integer"
                },
                "trackedLocationId": {
                    "type": "integer"
                }
            }
        },
        "dtos.TrackedMovementLatLonDTO": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "lat": {
                    "type": "number"
                },
                "lon": {
                    "type": "number"
                },
                "mappedDate": {
                    "type": "integer"
                },
                "trackedMovementId": {
                    "type": "integer"
                }
            }
        },
        "maps.AddressGeometry": {
            "type": "object",
            "properties": {
                "bounds": {
                    "$ref": "#/definitions/maps.LatLngBounds"
                },
                "location": {
                    "$ref": "#/definitions/maps.LatLng"
                },
                "location_type": {
                    "type": "string"
                },
                "types": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "viewport": {
                    "$ref": "#/definitions/maps.LatLngBounds"
                }
            }
        },
        "maps.LatLng": {
            "type": "object",
            "properties": {
                "lat": {
                    "type": "number"
                },
                "lng": {
                    "type": "number"
                }
            }
        },
        "maps.LatLngBounds": {
            "type": "object",
            "properties": {
                "northeast": {
                    "$ref": "#/definitions/maps.LatLng"
                },
                "southwest": {
                    "$ref": "#/definitions/maps.LatLng"
                }
            }
        },
        "maps.OpeningHours": {
            "type": "object",
            "properties": {
                "open_now": {
                    "description": "OpenNow is a boolean value indicating if the place is open at the current time.\nPlease note, this field will be null if it isn't present in the response.",
                    "type": "boolean"
                },
                "periods": {
                    "description": "Periods is an array of opening periods covering seven days, starting from Sunday,\nin chronological order.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/maps.OpeningHoursPeriod"
                    }
                },
                "permanently_closed": {
                    "description": "PermanentlyClosed indicates that the place has permanently shut down. Please\nnote, this field will be null if it isn't present in the response.",
                    "type": "boolean"
                },
                "weekday_text": {
                    "description": "weekdayText is an array of seven strings representing the formatted opening hours\nfor each day of the week, for example \"Monday: 8:30 am – 5:30 pm\".",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "maps.OpeningHoursOpenClose": {
            "type": "object",
            "properties": {
                "day": {
                    "description": "Day is a number from 0–6, corresponding to the days of the week, starting on\nSunday. For example, 2 means Tuesday.",
                    "type": "integer"
                },
                "time": {
                    "description": "Time contains a time of day in 24-hour hhmm format. Values are in the range\n0000–2359. The time will be reported in the place’s time zone.",
                    "type": "string"
                }
            }
        },
        "maps.OpeningHoursPeriod": {
            "type": "object",
            "properties": {
                "close": {
                    "description": "Close is when the place closes.",
                    "$ref": "#/definitions/maps.OpeningHoursOpenClose"
                },
                "open": {
                    "description": "Open is when the place opens.",
                    "$ref": "#/definitions/maps.OpeningHoursOpenClose"
                }
            }
        },
        "maps.Photo": {
            "type": "object",
            "properties": {
                "height": {
                    "description": "Height is the maximum height of the image.",
                    "type": "integer"
                },
                "html_attributions": {
                    "description": "htmlAttributions contains any required attributions.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "photo_reference": {
                    "description": "PhotoReference is used to identify the photo when you perform a Photo request.",
                    "type": "string"
                },
                "width": {
                    "description": "Width is the maximum width of the image.",
                    "type": "integer"
                }
            }
        },
        "maps.PlacesSearchResult": {
            "type": "object",
            "properties": {
                "business_status": {
                    "description": "BusinessStatus is a string indicating the operational status of the\nplace, if it is a business.",
                    "type": "string"
                },
                "formatted_address": {
                    "description": "FormattedAddress is the human-readable address of this place",
                    "type": "string"
                },
                "geometry": {
                    "description": "Geometry contains geometry information about the result, generally including the\nlocation (geocode) of the place and (optionally) the viewport identifying its\ngeneral area of coverage.",
                    "$ref": "#/definitions/maps.AddressGeometry"
                },
                "icon": {
                    "description": "Icon contains the URL of a recommended icon which may be displayed to the user\nwhen indicating this result.",
                    "type": "string"
                },
                "id": {
                    "description": "ID is an identifier.",
                    "type": "string"
                },
                "name": {
                    "description": "Name contains the human-readable name for the returned result. For establishment\nresults, this is usually the business name.",
                    "type": "string"
                },
                "opening_hours": {
                    "description": "OpeningHours may contain whether the place is open now or not.",
                    "$ref": "#/definitions/maps.OpeningHours"
                },
                "permanently_closed": {
                    "description": "PermanentlyClosed is a boolean flag indicating whether the place has permanently\nshut down.",
                    "type": "boolean"
                },
                "photos": {
                    "description": "Photos is an array of photo objects, each containing a reference to an image.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/maps.Photo"
                    }
                },
                "place_id": {
                    "description": "PlaceID is a textual identifier that uniquely identifies a place.",
                    "type": "string"
                },
                "price_level": {
                    "description": "PriceLevel is the price level of the place, on a scale of 0 to 4.",
                    "type": "integer"
                },
                "rating": {
                    "description": "Rating contains the place's rating, from 1.0 to 5.0, based on aggregated user\nreviews.",
                    "type": "number"
                },
                "types": {
                    "description": "Types contains an array of feature types describing the given result.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "user_ratings_total": {
                    "description": "UserRatingsTotal contains total number of the place's ratings",
                    "type": "integer"
                },
                "vicinity": {
                    "description": "Vicinity contains a feature name of a nearby location.",
                    "type": "string"
                }
            }
        },
        "models.Device": {
            "type": "object",
            "properties": {
                "androidId": {
                    "type": "string"
                },
                "brand": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "device": {
                    "type": "string"
                },
                "deviceModel": {
                    "type": "string"
                },
                "errorLogs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ErrorLog"
                    }
                },
                "id": {
                    "type": "integer"
                },
                "logs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Log"
                    }
                },
                "product": {
                    "type": "string"
                },
                "sdk": {
                    "type": "string"
                },
                "secureId": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/models.User"
                },
                "userId": {
                    "type": "integer"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "models.ErrorLog": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "deviceID": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "models.Location": {
            "type": "object",
            "properties": {
                "accuracy": {
                    "type": "number"
                },
                "altitude": {
                    "type": "number"
                },
                "bearing": {
                    "type": "number"
                },
                "createdAt": {
                    "type": "string"
                },
                "date": {
                    "type": "integer"
                },
                "deletedAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "lat": {
                    "type": "number"
                },
                "lon": {
                    "type": "number"
                },
                "provider": {
                    "type": "string"
                },
                "sensorType": {
                    "type": "string"
                },
                "speed": {
                    "type": "number"
                },
                "trackerID": {
                    "type": "integer"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "models.Log": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "dateTime": {
                    "type": "integer"
                },
                "deletedAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "device": {
                    "$ref": "#/definitions/models.Device"
                },
                "deviceID": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "models.Reason": {
            "type": "object",
            "properties": {
                "color": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "icon": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "models.Tracker": {
            "type": "object",
            "properties": {
                "batteryLevel": {
                    "type": "integer"
                },
                "createdAt": {
                    "type": "string"
                },
                "date": {
                    "type": "integer"
                },
                "deletedAt": {
                    "type": "string"
                },
                "device": {
                    "$ref": "#/definitions/models.Device"
                },
                "deviceID": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "locations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Location"
                    }
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "models.Transport": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "hexColor": {
                    "type": "string"
                },
                "icon": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "password": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BasicAuthorization": {
            "type": "basic"
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "localhost:8000",
	BasePath:    "/api",
	Schemes:     []string{},
	Title:       "CBS Backend Swagger server",
	Description: "CBS Swagger backend server.",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register("swagger", &s{})
}
